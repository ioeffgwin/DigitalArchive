using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SQLite;

namespace DigitalArchive
{
    class CatalogueItemMetaUpdate : CatalogueItemUpdate
    {
        /*
         * J Vincent
         * Add selected meta data from files in archive catalogue
         * some items such as additional keywords, copyright and GDPR can be added to catalogue
         * they won't appear on the file
         * update the tblMetaItems
         * 
         * 
         */

        protected int metaID;
        protected int metaItemID;
        protected Boolean metaOrig;
        protected string metaTitle; //255 char
        protected string metaFormat; //50 char
        protected string metaData; //255 char
        protected Boolean metaUpdateSuccess;



        public Boolean AddMetaItem(int itemID, Boolean metaOrig, string metaTitle, string metaFormat, string metaData)
        {
            /*
             * J Vincent
             * Add metadata 
             * 
             * metaID - autogenerated
             * itemID = passed in
             * metaOrig = passed in (if true it cant be changed unless changed on file)
             * metaTitle = passed in (title of meta type)
             * metaFormat = passed in (type of meta info)
             * metaData = passed in (value of meta)
             * 
             */
            Boolean bAddSuccess = false;
            try
            {
                // add things  tblItemMeta

                using (SQLiteConnection cat_conn = new SQLiteConnection(Globals.connCat))
                {

                    cat_conn.Open();
                    string sqli = "INSERT INTO tblItemMeta (itemID, metaOrig, metaTitle, metaFormat, metaData) " +
                        "VALUES (@itemID, @metaOrig, @metaTitle, @metaFormat, @metaData); ";
                    using (SQLiteCommand sql_cmd = new SQLiteCommand(sqli, cat_conn))
                    {
                        sql_cmd.Parameters.Add(new SQLiteParameter("@itemID", itemID));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@metaOrig", metaOrig));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@metaTitle", metaTitle));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@metaFormat", metaFormat));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@metaData", metaData));

                        sql_cmd.ExecuteNonQuery();
                        bAddSuccess = true;
                    }
                    cat_conn.Close();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return bAddSuccess;
        }

        public Boolean ChangeMetaItem(int metaID, int itemID, Boolean metaOrig, string metaTitle, string metaFormat, string metaData)
        {
            /*
             * J Vincent
             * cnages to the item meta data
             * 
             * metaID = passed in
             * itemID = passed in
             * metaOrig = passed in (if true it cant be changed unless changed on file)
             * metaTitle = passed in (title of meta type)
             * metaFormat = passed in (type of meta info)
             * metaData = passed in (value of meta)
             * 
             * 
             * 
             * 
             */

            Boolean bChangeSuccess = false;
            try
            {
                //change things in tblItemMeta
                using (SQLiteConnection cat_conn = new SQLiteConnection(Globals.connCat))
                {
                    cat_conn.Open();
                    string sqlu = "UPDATE tblItemMeta SET column=value, column=value   WHERE metaID = @metaID ;";
                    using (SQLiteCommand sql_cmd = new SQLiteCommand(sqlu, cat_conn))
                    {
                        sql_cmd.Parameters.Add(new SQLiteParameter("@metaID", metaID));
                        //sql_cmd.Parameters.Add(new SQLiteParameter("@metavalue", value));
                        sql_cmd.ExecuteNonQuery();
                    }
                    cat_conn.Close();
                    bChangeSuccess = true;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }

            return bChangeSuccess;

        }

        public Boolean DeleteMetaItem(int metaID)
        {
            /*
             * J Vincent
             * 
             * Just the meta item ID is needed - confirmation will be assumed to have been carried out
             * 
             * 
             * 
             * 
             */

            Boolean bDeleteSuccess = false;
            try
            {
                // delete things tblItemMeta
                SQLiteConnection cat_conn = new SQLiteConnection(Globals.connCat);
                cat_conn.Open();

                string sqld = "DELETE FROM tblItemMeta WHERE metaitemID = " + metaID + ";";
                SQLiteCommand sql_cmd;
                sql_cmd = cat_conn.CreateCommand();
                sql_cmd.CommandText = sqld;
                sql_cmd.ExecuteNonQuery();
                cat_conn.Close();
                bDeleteSuccess = true;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return bDeleteSuccess;

        }

    }
}
