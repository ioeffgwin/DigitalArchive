using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SQLite;
using System.IO;

namespace DigitalArchive
{
    public class CatalogueItemUpdate
    {
        /*
         * J Vincent
         * Having read through files and folders add details to the catalogue
         * update tblItems
         * 
         * 
         * 
         */
        public int itemID; //blank if new item //all others blank for deletetion
        protected DateTime itemAdded;
        protected string itemAddedBy;
        protected string itemName;
        protected string itemPath;
        protected string itemChecksum;
        protected DateTime itemLastChange;
        protected string itemOwner;
        protected Boolean itemCopyright;
        protected Boolean itemGDPR;
        protected Boolean updateSuccess;


        public static void Main()
        {
            // not in current use


        }


        public Boolean AddItem(string itemName, string itemPath, string itemChecksum, string itemOwner, Boolean itemCopyright = default, Boolean itemGDPR = default)
        {
            /*
             * J Vincent
             * Add a new item to the catalogue with data taken from the file
             * 
             * itemID - autogenerated need to then extract this to pass to itemID
             * itemAdded = DateTime.Now
             * itemAddedBy = Globals.UsersName
             * itemName = passed in
             * itemPath = passed in needs to be relative to root of catalogue
             * itemChecksum = passed in
             * itemLastChange = DateTime.Now
             * itemOwner = passed in
             * itemCopyright = passed in (default false)
             * itemGDPR = passed in (default false)
             * 
             */
            Boolean bAddSuccess = false;
            try
            {

                // add things to tblItems and tblItemMeta
                using (SQLiteConnection cat_conn = new SQLiteConnection(Globals.connCat))
                {

                    cat_conn.Open();
                    // this needs to be the path relative to the catalogue

                    //string localPath = Path.GetDirectoryName(itemPath);


                    string sqli = "INSERT INTO tblItems (itemAdded, itemAddedBy, itemName, itemPath, itemChecksum, itemLastChange, itemOwner,itemCopyright,itemGDPR) " +
                        "VALUES (@dateAdded, @addedBy, @itemName, @itemPath, @itemChecksum, " +
                        "@itemLastChange, @itemOwner, @itemCopyright, @itemGDPR);";
                    using (SQLiteCommand sql_cmd = new SQLiteCommand(sqli, cat_conn))
                    {
                        sql_cmd.Parameters.Add(new SQLiteParameter("@dateAdded", DateTime.Now));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@addedBy", Globals.usersName));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@itemName", itemName));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@itemPath", itemPath));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@itemChecksum", itemChecksum));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@itemLastChange", DateTime.Now));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@itemOwner", itemOwner));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@itemCopyright", itemCopyright));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@itemGDPR", itemGDPR));
                        sql_cmd.ExecuteNonQuery();
                    }
                    cat_conn.Close();
                }
                bAddSuccess = true;
                //get the itemID for the new item
                this.itemID = GetItemID(itemName, itemPath, itemChecksum);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return bAddSuccess;
        }

        protected int GetItemID(string itemName, string itemPath, string itemChecksum)
        {
            /*
             * J Vincent
             * Once a new item has been added the itemID is then needed to add metadata to tblItemMeta
             * using class CatalogueItemMetaUpdate.
             * 
             * the 3 variables should ensure that the correct item is selected
             *  
             */

            int myItemID = 0;
            SQLiteConnection cat_conn = new SQLiteConnection(Globals.connCat);
            cat_conn.Open();

            string sql = "SELECT itemID FROM tblItems WHERE itemName = '" + itemName + "' " +
                "AND itemPath = '" + itemPath + "' AND itemChecksum = '" + itemChecksum + "';";
            SQLiteDataReader sqlRead;
            SQLiteCommand sql_cmd;
            sql_cmd = cat_conn.CreateCommand();
            sql_cmd.CommandText = sql;

            sqlRead = sql_cmd.ExecuteReader();
            while (sqlRead.Read())
            {
                myItemID = sqlRead.GetInt16(0);
            }
            cat_conn.Close();



            return myItemID;
        }

        public Boolean ChangeItem(int itemID, string ItemName, string itemPath, string itemChecksum, string itemOwner, Boolean itemCopyright = default, Boolean itemGDPR = default)
        {
            /*
             * J Vincent
             * This will rely on a current catalogue being referenced in Globals
             * 
             * 
             * itemID = passed in
             * itemName = passed in (Unlikely to change but can)
             * itemPath = passed in needs to be relative to root of catalogue
             * itemChecksum = passed in (if this changes the file contents have been changed)
             * itemLastChange = DateTime.Now
             * itemOwner = passed in
             * itemCopyright = passed in (default false)
             * itemGDPR = passed in (default false)
             * 
             * 
             * 
             * 
             */
            //the amount of data that can be updated should be limited
            //accept change to checksum?
            //changes to metadata etc may need to be reflected
            //or would it be easier to delete item and import new?


            Boolean bChangeSuccess = false;
            try
            {
                // change things in tblItems. Maybe delete, change or add in tblItemMeta
                using (SQLiteConnection cat_conn = new SQLiteConnection(Globals.connCat))
                {

                    cat_conn.Open();
                    string sqlu = "UPDATE tblItems SET column=value, column=value   WHERE metaID = @itemID ;";
                    using (SQLiteCommand sql_cmd = new SQLiteCommand(sqlu, cat_conn))
                    {
                        sql_cmd.Parameters.Add(new SQLiteParameter("@itemID", itemID));
                        sql_cmd.ExecuteNonQuery();
                        bChangeSuccess = true;

                    }
                    cat_conn.Close();
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }

            return bChangeSuccess;

        }

        public Boolean DeleteItem(int itemID)
        {
            /*
             * J Vincent 
             * 
             * Just the item ID is needed - confirmation will be assumed to have been carried out
             * also need to delete associated meta items first
             * 
             * 
             * 
             */

            Boolean bDeleteSuccess = false;
            try
            {
                // delete things from tblItemMeta and then tblItems
                SQLiteConnection cat_conn = new SQLiteConnection(Globals.connCat);
                cat_conn.Open();
                string sqld = "DELETE FROM tblItemMeta WHERE itemID = " + itemID + "; ";

                sqld += "DELETE FROM tblItems WHERE itemID = " + itemID + ";";

                SQLiteCommand sql_cmd;
                sql_cmd = cat_conn.CreateCommand();
                sql_cmd.CommandText = sqld;
                sql_cmd.ExecuteNonQuery();
                cat_conn.Close();
                bDeleteSuccess = true;



            }
            catch (Exception ex)
            {
                throw ex;
            }

            return bDeleteSuccess;

        }
        public void SetCatalogueVer()
        {
            /*
             * J Vincent
             * This update the catalogue to the latest version
             * latest version is in date format down to millisecond
             * can be used for comparison with other copies of the "same" catalogue
             * catalogue version update with every change
             * 
             */
            //change Cat Version (and last changed date)
            //
            DateTime theDate = DateTime.Now;
            string newVersion = theDate.ToString("yyyyMMddHHmmssFFF");
            try
            {
                using (SQLiteConnection cat_conn = new SQLiteConnection(Globals.connCat))
                {

                    cat_conn.Open();
                    // update tblAppSystemb(no where clause as only one line should be in use)
                    string sqlu = "UPDATE tblCatalogue SET CatVersion = @newVersion, catLastUpdate = @theDate ; ";
                    using (SQLiteCommand sql_cmd = new SQLiteCommand(sqlu, cat_conn))
                    {
                        sql_cmd.Parameters.Add(new SQLiteParameter("@newVersion", newVersion));
                        sql_cmd.Parameters.Add(new SQLiteParameter("@theDate", theDate));
                        sql_cmd.ExecuteNonQuery();
                    }
                    cat_conn.Close();
                }
                Globals.curCatVer = newVersion;

            }
            catch (Exception e)
            {
                throw e;
            }
        }


    }
}
